version: "3.1"

services:

  api_gateway:
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8000:8000"
    networks:
      - network

  accommodation_service:
    build:
      context: accommodation_service/
      dockerfile: Dockerfile
    restart: always
    container_name: "accommodation_service"
    hostname: "accommodation_service"
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@accommodation_db:27017
    depends_on:
      accommodation_db:
        condition: service_healthy
    networks:
      - network

  accommodation_db:
    hostname: "accommodation_db"
    container_name: "accommodation_db"
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: accommodationDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - accommodation_db:/data/db
    networks:
      - network

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      # hostname of mongo databse
      - ME_CONFIG_MONGODB_SERVER=accommodation_db
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - accommodation_db
    ports:
      - "8081:8081"
    volumes:
      - mong_express_data:/data/db
    networks:
      - network

volumes:
  accommodation_db:
  mong_express_data:

networks:
  network:
    driver: bridge
